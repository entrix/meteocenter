#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
//#include<vector>
#include"temperature.h"
#include"temperatureDao.h"

namespace ntm {

#include<sqlca.h>
#include"../../main.h"
  
  EXEC SQL BEGIN DECLARE SECTION;
  //for scalar case
  unsigned long long  ull_t;
  unsigned short  us_t_1;
  unsigned short  us_t_2;
  unsigned short  us_t_3;
  static varchar c20_t[20];
  double d_t;
  //cycle's increment varialble
  unsigned short loop;
  //for vector case
  unsigned long long  aull_t[100];
  unsigned short  aus_t_1[100];
  unsigned short  aus_t_2[100];
  unsigned short  aus_t_3[100];
  static varchar ac20_t[100][20];
  double ad_t[100];
  EXEC SQL END DECLARE SECTION;
  
  using namespace std;

  void temperatureDao::copy(temperature *tm)
  {
    char *value = tm->getDateTime();
    ull_t = tm->getId();
    us_t_1 = tm->getPointId();
    us_t_2 = tm->getType();
    for (int i = 0; i < 19; ++i)
      c20_t.arr[i] = value[i];
    c20_t.arr[19] = '\0';
    c20_t.len = ustrlen(c20_t.arr);
    us_t_3  = tm->getPrediction();
    d_t = tm->getValue();
  }

  void temperatureDao::acopy(temperature *atm, int size_a)
  {
    char *value;

    for (int i = 0; i < size_a; ++i) {
      value = atm[i].getDateTime();
      aull_t[i] = atm[i].getId();
      aus_t_1[i] = atm[i].getPointId();
      aus_t_2[i] = atm[i].getType();
      for (int j = 0; j < 19; ++j)
	ac20_t[i].arr[j] = value[j];
      ac20_t[i].arr[19] = '\0';
      ac20_t[i].len = ustrlen(ac20_t[i].arr);
      aus_t_3[i]  = atm[i].getPrediction();
      ad_t[i] = atm[i].getValue();
    }
  }
 
  temperature *temperatureDao::findById(const ull id)
  {    
    //set id for sql select query
    ull_t = id;
    
    //sql query with oracle pro*C/C++ 
    EXEC SQL SELECT      
      point_id,
      type,
      datetime,
      prediction,
      value
      INTO :us_t_1, :us_t_2, :c20_t, :us_t_3, :d_t
      FROM temperature
      WHERE temperature_id = :ull_t;

    //copy values to local variables
    cId = ull_t;
    cPointId = us_t_1;
    cType = us_t_2;
    for (int i = 0; i < 19; ++i)
      cDateTime[i] = c20_t.arr[i];
    cDateTime[19] = '\0';
    cPrediction = us_t_3;
    cValue = d_t;

    //set new object with selected values
    temperature *tm = new temperature();
    tm->setId(cId);
    tm->setPointId(cPointId);
    tm->setDateTime(cDateTime);
    tm->setPrediction(cPrediction);
    tm->setValue(cValue);

    //printf("result - id = %llu name = %s type = %u\n", tm->getId(), tm->getName(), tm->getType());
    return tm;
  }

  void temperatureDao::insert(temperature *tm)
  {
    cout << "insert scalar mode"  << endl;
    this->copy(tm);
    EXEC SQL INSERT INTO temperature 
      VALUES(:ull_t, :us_t_1, us_t_2, :c20_t, :us_t_3, :d_t);
    //EXEC SQL COMMIT;
  }

  void temperatureDao::update(temperature *tm)
  {
    cout << "update scalar mode" << endl;
    this->copy(tm);
    EXEC SQL UPDATE temperature SET
      point_id=:us_t_1,
      type=:us_t_2,
      datetime=:c20_t,
      prediction=:us_t_3,
      value=:d_t
      WHERE temperature_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void temperatureDao::remove(temperature *tm)
  {
    cout << "delete scalar mode" << endl;
    this->copy(tm);
    EXEC SQL DELETE FROM temperature WHERE temperature_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  temperature *temperatureDao::findById(ull *aid, int size_a)
  {
    // //set id values for sql select queries
    // for (int i = 0; i < size_a; ++i)
    //   aull_t[i] = aid[i];
    
    // //sql query with oracle pro*C/C++ 
    // SELECT temperature_type, temperature_name INTO :aus_t, :ac20_t FROM temperature WHERE temperature_id = :aull_t;

    temperature *tm, *atm = new temperature[size_a];

    for (int i = 0; i < size_a; ++i) {
      tm = findById(aid[i]);
      //set new object with selected values
      atm[i].setId(tm->getId());
      atm[i].setPointId(tm->getPointId());
      atm[i].setType(tm->getType());
      atm[i].setDateTime(tm->getDateTime());
      atm[i].setPrediction(tm->getPrediction());
      atm[i].setValue(tm->getValue());
    }
    
    return atm;
  }

  void temperatureDao::insert(temperature *atm, int size_a)
  {
    cout << "insert vector mode" << endl;
    this->acopy(atm, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      INSERT INTO temperature
      VALUES(:aull_t, :aus_t_1, aus_t_2, :ac20_t, :aus_t_3, :ad_t);
    //EXEC SQL COMMIT WORK RELEASE;

    // for (int i = 0; i < size_a; ++i) {
    //   cout << atm[i].getName() << endl;
    // }
  }

  void temperatureDao::update(temperature *atm, int size_a)
  {
    cout << "update vector mode" << endl;
    this->acopy(atm, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      UPDATE temperature SET
      point_id=:aus_t_1,
      type=:aus_t_2,
      datetime=:ac20_t,
      prediction=:aus_t_3,
      value=:ad_t
      WHERE temperature_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void temperatureDao::remove(temperature *atm, int size_a)
  {
    cout << "delete vector mode" << endl;
    this->acopy(atm, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      DELETE FROM temperature
      WHERE temperature_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }
}
