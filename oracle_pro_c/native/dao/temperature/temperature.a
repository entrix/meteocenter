!<arch>
//                                              130       `
temperatureDao.h/
temperatureDao.pcpp/
temperatureDao-test.pcpp/
temperatureDao.h/
temperatureDao.pcpp/
temperatureDao-test.pcpp/
temperature.h/  1336499769  1001  1001  100644  476       `
#include"../types.h"

#ifndef __RSMC_H__
#define __RSMC_H__

namespace nrs {

  class rsmc {
    ull rsmcId;
    us  rsmcType;
    char *rsmcName;
  
  public:
    //constructor with no parameters
    //for the java pojo classes ideology
    rsmc();
  
    //standart getters and setter for class fields
    ull getId();
    void setId(const ull id);
    us  getType();
    void setType(const us type);
    char *getName();
    void setName(const char *name);
  };

}

#endif
temperature.cpp/1336499769  1001  1001  100644  598       `
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include"rsmc.h"

namespace nrs {

  rsmc::rsmc()
  {
    rsmcName = new char[21];
  
    for (int i = 0; i < 21; ++i)
      rsmcName[i] = '\0';
  }  

  ull rsmc::getId()
  {
    return rsmcId;
  }

  void rsmc::setId(ull id)
  {
    rsmcId = id;
  }

  char *rsmc::getName()
  {
    return rsmcName;
  }

  void rsmc::setName(const char *name)
  {
    if (strlen(name) > 20)
      return;

    strcpy(rsmcName, name);
  }

  us rsmc::getType()
  {
    return rsmcType;
  }

  void  rsmc::setType(const us type)
  {
    rsmcType = type;
  }

}
/0              1336499769  1001  1001  100644  595       `
#include"../types.h"
#include "rsmc.h"

#ifndef __RSMCDAO_H__
#define __RSMCDAO_H__

namespace nrs {

  class rsmcDao {
    //copying parameters
    ull  cid;
    us   ctype;
    char cname[21];
  
    void copy(rsmc *rs);
    void acopy(rsmc *ars, int size_a);
  public:
    //scalar case
    rsmc *findById(ull id);
    void insert(rsmc *rs);
    void update(rsmc *rs);
    void remove(rsmc *rs);
    //vector case
    rsmc *findById(ull *aid, int size_a);
    void insert(rsmc *ars, int size_a);
    void update(rsmc *ars, int size_a);
    void remove(rsmc *ars, int size_a);
  };

}

#endif

/18             1336499769  1001  1001  100644  4004      `
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
//#include<vector>
#include"rsmc.h"
#include"rsmcDao.h"
#include"../main.h"

namespace nrs {

#include<sqlca.h>
  
  EXEC SQL BEGIN DECLARE SECTION;
  //for scalar case
  unsigned long long  ull_t;
  unsigned short  us_t;
  varchar c20_t[20];
  //cycle's increment varialble
  unsigned short loop;
  //for vector case
  unsigned long long  aull_t[100];
  unsigned short  aus_t[100];
  varchar ac20_t[100][20];
  EXEC SQL END DECLARE SECTION;
  
  using namespace std;

  void rsmcDao::copy(rsmc *rs)
  {
    char *name = rs->getName();
    ull_t = rs->getId();
    for (int i = 0; i < 19; ++i)
      c20_t.arr[i] = name[i];
    c20_t.arr[19] = '\0';
    c20_t.len = strlen(c20_t.arr);
    us_t  = rs->getType();
  }

  void rsmcDao::acopy(rsmc *ars, int size_a)
  {
    char *name;

    for (int i = 0; i < size_a; ++i) {
      name = ars[i].getName();
      aull_t[i] = ars[i].getId();
      for (int j = 0; j < 19; ++j)
      ac20_t[i].arr[j] = name[j];
      ac20_t[i].arr[19] = '\0';
      ac20_t[i].len = strlen(ac20_t[i].arr);
      //cout << ars[i].getName() << " --- " << ac20_t[i].arr << endl;
      aus_t[i]  = ars[i].getType();
    }
  }
 
  rsmc *rsmcDao::findById(const ull id)
  {    
    //set id for sql select query
    ull_t = id;
    
    //sql query with oracle pro*C/C++ 
    EXEC SQL SELECT rsmc_type, rsmc_name INTO :us_t, :c20_t FROM rsmc WHERE rsmc_id = :ull_t;

    //copy values to local variables
    cid = ull_t;
    for (int i = 0; i < 20; ++i)
      cname[i] = c20_t.arr[i];
    cname[20] = '\0';
    ctype = us_t;
  
    //set new object with selected values
    rsmc *rs = new rsmc();
    rs->setId(cid);
    rs->setType(ctype);
    rs->setName(cname); 

    //printf("result - id = %llu name = %s type = %u\n", rs->getId(), rs->getName(), rs->getType());
    return rs;
  }

  void rsmcDao::insert(rsmc *rs)
  {
    cout << "insert scalar mode"  << endl;
    this->copy(rs);
    EXEC SQL INSERT INTO rsmc VALUES(:ull_t, :c20_t, :us_t);
    //EXEC SQL COMMIT;
  }

  void rsmcDao::update(rsmc *rs)
  {
    cout << "update scalar mode" << endl;
    this->copy(rs);
    EXEC SQL UPDATE rsmc SET rsmc_name=:c20_t, rsmc_type=:us_t WHERE rsmc_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void rsmcDao::remove(rsmc *rs)
  {
    cout << "delete scalar mode" << endl;
    this->copy(rs);
    EXEC SQL DELETE FROM rsmc WHERE rsmc_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  rsmc *rsmcDao::findById(ull *aid, int size_a)
  {
    // //set id values for sql select queries
    // for (int i = 0; i < size_a; ++i)
    //   aull_t[i] = aid[i];
    
    // //sql query with oracle pro*C/C++ 
    // SELECT rsmc_type, rsmc_name INTO :aus_t, :ac20_t FROM rsmc WHERE rsmc_id = :aull_t;

    rsmc *rs, *ars = new rsmc[size_a];

    for (int i = 0; i < size_a; ++i) {
      rs = findById(aid[i]);
      //set new object with selected values
      ars[i].setId(rs->getId());
      ars[i].setName(rs->getName());  
      ars[i].setType(rs->getType());
   }
    
    return ars;
  }

  void rsmcDao::insert(rsmc *ars, int size_a)
  {
    cout << "insert vector mode" << endl;
    this->acopy(ars, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      INSERT INTO rsmc
      VALUES(:aull_t, :ac20_t,:aus_t);
    //EXEC SQL COMMIT WORK RELEASE;

    // for (int i = 0; i < size_a; ++i) {
    //   cout << ars[i].getName() << endl;
    // }
  }

  void rsmcDao::update(rsmc *ars, int size_a)
  {
    cout << "update vector mode" << endl;
    this->acopy(ars, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      UPDATE rsmc SET
      rsmc_name=:ac20_t, rsmc_type=:aus_t 
      WHERE rsmc_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void rsmcDao::remove(rsmc *ars, int size_a)
  {
    cout << "delete vector mode" << endl;
    this->acopy(ars, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      DELETE FROM rsmc
      WHERE rsmc_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }
}
/39             1336499769  1001  1001  100644  2261      `
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
//#include<vector>
#include"../types.h"
#include"rsmc.h"
#include"rsmcDao.h"
#include<sqlca.h>

using namespace nrs;
using namespace std;

EXEC SQL BEGIN DECLARE SECTION;
varchar log_pass[40];
EXEC SQL END DECLARE SECTION;

void pres(rsmc *rs)
{
  printf("*  id    *  nrs::rsmc_name       *  nrs::rsmc_type *\n");
  printf("|  %-5d ", rs->getId());
  printf("|  %-20s |", rs->getName());
  printf("  %-10u     |\n", rs->getType());
  printf("--------------------------------------------------\n");
}

void pres(rsmc *ars, int size_a)
{
  printf("*  id    *  nrs::rsmc_name       *  nrs::rsmc_type *\n");
  for (int i = 0; i < size_a; ++i) {
    printf("|  %-5d ", ars[i].getId());
    printf("|  %-20s |", ars[i].getName());
    printf("  %-10u     |\n", ars[i].getType());
  }
  printf("--------------------------------------------------\n");
}

void init_test_rsmc(rsmc *ars, char *name, ull *indices, int size_a)
{
  for (int i = 0; i < 21; ++i)
    name[i] = '\0';

  for (int i = 1; i < 10; ++i) {
    ars[i].setId(i);
    sprintf(name, "%d", i);
    //cout << name << endl;
    ars[i].setName(name); 
    ars[i].setType(i);
    indices[i-1] = i-1;
  }

  indices[size_a-1] = size_a - 1;
}

void test_rsmc()
{
  rsmc *rs, *ars = new rsmc[10];
  rsmcDao *rsd = new rsmcDao();
  //vector<rsmc> vrs(10);
  char name[20];
  ull *indices = new ull[10];

  rs = new rsmc();
  rs->setId(1);
  rs->setName("tunoshna_station");
  rs->setType(0);
  rsd->insert(rs);
  delete rs;
  pres(rs = rsd->findById(1));
  rs->setType(1);
  rsd->update(rs);
  pres(rs = rsd->findById(1));
  rsd->remove(rs);
  //EXEC SQL COMMIT WORK RELEASE;

  init_test_rsmc(ars, name, indices, 10);
  rsd->insert(ars, 10);
  delete [] ars;
  ars = rsd->findById(indices, 10);
  pres(ars, 10);
  for (int i = 1; i < 10; ++i) { 
    ars[i].setType(i + 10);
  }

  rsd->update(ars, 10);
  delete [] ars;
  ars = rsd->findById(indices, 10);
  pres(ars, 10);
  rsd->remove(ars, 10);
}

int main()
{
  strcpy(log_pass.arr,"system/manager");
  log_pass.len = strlen(log_pass.arr);
  EXEC SQL CONNECT :log_pass;
  printf("connection open\n");
  test_rsmc();
  EXEC SQL COMMIT;
  printf("connection closed\n");
  
  return 0;
}

temperature.h/  1336519515  1001  1001  100644  787       `
#include"../../types.h"

#ifndef __TEMPERATURE_H__
#define __TEMPERATURE_H__

namespace ntm {

  class temperature {
    ull temperatureId;
    us pointId;
    us type;
    char *dateTime;
    us   prediction;
    double value;
  
  public:
    //constructor with no parameters
    //for the java pojo classes ideology
    temperature();
    ~temperature();

    //standart getters and setter for class fields
    ull getId();
    void setId(const ull id);
    us  getPointId();
    void setPointId(const ull pointId);
    us  getType();
    void setType(const us type);
    char *getDateTime();
    void setDateTime(const char *dateTime);
    us getPrediction();
    void setPrediction(const us prediction);
    double getValue();
    void setValue(const double value);
  };

}

#endif

temperature.cpp/1336519874  1001  1001  100644  1230      `
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include"temperature.h"

namespace ntm {

  temperature::temperature()
  {
    dateTime = new char[20];
  
    for (int i = 0; i < 20; ++i) {
      dateTime[i] = '\0';
    }

  }  

  temperature::~temperature()
  {
    delete [] dateTime;
  }

  ull temperature::getId()
  {
    return temperatureId;
  }

  void temperature::setId(ull id)
  {
    temperatureId = id;
  }

  us temperature::getPointId()
  {
    return pointId;
  }

  void  temperature::setPointId(const ull pointId)
  {
    this->pointId = pointId;
  }

  char *temperature::getDateTime()
  {
    return dateTime;
  }

  void temperature::setDateTime(const char *dateTime)
  {
    if (strlen(dateTime) > 20)
      return;

    strcpy(this->dateTime, dateTime);
  }

  us temperature::getType()
  {
    return type;
  }

  void  temperature::setType(const us type)
  {
    this->type = type;
  }

  us temperature::getPrediction()
  {
    return prediction;
  }

  void  temperature::setPrediction(const us prediction)
  {
    this->prediction = prediction;
  }

  double temperature::getValue()
  {
    return value;
  }

  void  temperature::setValue(const double value)
  {
    this->value = value;
  }

}
/65             1336519647  1001  1001  100644  756       `
#include"../../types.h"
#include "temperature.h"

#ifndef __TEMPERATUREDAO_H__
#define __TEMPERATUREDAO_H__

namespace ntm {

  class temperatureDao {
    //copying parameters
    ull  cId;
    us cPointId;
    us cType;
    char cDateTime[20];
    us cPrediction;
    double cValue;
    
    void copy(temperature *tm);
    void acopy(temperature *atm, int size_a);
  public:
    //scalar case
    temperature *findById(ull id);
    void insert(temperature *tm);
    void update(temperature *tm);
    void remove(temperature *tm);
    //vector case
    temperature *findById(ull *aid, int size_a);
    void insert(temperature *atm, int size_a);
    void update(temperature *atm, int size_a);
    void remove(temperature *atm, int size_a);
  };

}

#endif
/83             1336519954  1001  1001  100644  5212      `
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
//#include<vector>
#include"temperature.h"
#include"temperatureDao.h"
#include"../../main.h"

namespace ntm {

#include<sqlca.h>
  
  EXEC SQL BEGIN DECLARE SECTION;
  //for scalar case
  unsigned long long  ull_t;
  unsigned short  us_t_1;
  unsigned short  us_t_2;
  unsigned short  us_t_3;
  varchar c20_t[20];
  double d_t;
  //cycle's increment varialble
  unsigned short loop;
  //for vector case
  unsigned long long  aull_t[100];
  unsigned short  aus_t_1[100];
  unsigned short  aus_t_2[100];
  unsigned short  aus_t_3[100];
  varchar ac20_t[100][20];
  double ad_t[100];
  EXEC SQL END DECLARE SECTION;
  
  using namespace std;

  void temperatureDao::copy(temperature *tm)
  {
    char *value = tm->getDateTime();
    ull_t = tm->getId();
    us_t_1 = tm->getPointId();
    us_t_2 = tm->getType();
    for (int i = 0; i < 19; ++i)
      c20_t.arr[i] = value[i];
    c20_t.arr[19] = '\0';
    c20_t.len = strlen(c20_t.arr);
    us_t_3  = tm->getPrediction();
    d_t = tm->getValue();
  }

  void temperatureDao::acopy(temperature *atm, int size_a)
  {
    char *value;

    for (int i = 0; i < size_a; ++i) {
      value = atm[i].getDateTime();
      aull_t[i] = atm[i].getId();
      aus_t_1[i] = atm[i].getPointId();
      aus_t_2[i] = atm[i].getType();
      for (int j = 0; j < 19; ++j)
	ac20_t[i].arr[j] = value[j];
      ac20_t[i].arr[19] = '\0';
      ac20_t[i].len = strlen(ac20_t[i].arr);
      aus_t_3[i]  = atm[i].getPrediction();
      ad_t[i] = atm[i].getValue();
    }
  }
 
  temperature *temperatureDao::findById(const ull id)
  {    
    //set id for sql select query
    ull_t = id;
    
    //sql query with oracle pro*C/C++ 
    EXEC SQL SELECT      
      point_id,
      type,
      datetime,
      prediction,
      value
      INTO :us_t_1, :us_t_2, :c20_t, :us_t_3, :d_t
      FROM temperature
      WHERE temperature_id = :ull_t;

    //copy values to local variables
    cId = ull_t;
    cPointId = us_t_1;
    cType = us_t_2;
    for (int i = 0; i < 19; ++i)
      cDateTime[i] = c20_t.arr[i];
    cDateTime[19] = '\0';
    cPrediction = us_t_3;
    cValue = d_t;

    //set new object with selected values
    temperature *tm = new temperature();
    tm->setId(cId);
    tm->setPointId(cPointId);
    tm->setDateTime(cDateTime);
    tm->setPrediction(cPrediction);
    tm->setValue(cValue);

    //printf("result - id = %llu name = %s type = %u\n", tm->getId(), tm->getName(), tm->getType());
    return tm;
  }

  void temperatureDao::insert(temperature *tm)
  {
    cout << "insert scalar mode"  << endl;
    this->copy(tm);
    EXEC SQL INSERT INTO temperature 
      VALUES(:ull_t, :us_t_1, us_t_2, :c20_t, :us_t_3, :d_t);
    //EXEC SQL COMMIT;
  }

  void temperatureDao::update(temperature *tm)
  {
    cout << "update scalar mode" << endl;
    this->copy(tm);
    EXEC SQL UPDATE temperature SET
      point_id=:us_t_1,
      type=:us_t_2,
      datetime=:c20_t,
      prediction=:us_t_3,
      value=:d_t
      WHERE temperature_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void temperatureDao::remove(temperature *tm)
  {
    cout << "delete scalar mode" << endl;
    this->copy(tm);
    EXEC SQL DELETE FROM temperature WHERE temperature_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  temperature *temperatureDao::findById(ull *aid, int size_a)
  {
    // //set id values for sql select queries
    // for (int i = 0; i < size_a; ++i)
    //   aull_t[i] = aid[i];
    
    // //sql query with oracle pro*C/C++ 
    // SELECT temperature_type, temperature_name INTO :aus_t, :ac20_t FROM temperature WHERE temperature_id = :aull_t;

    temperature *tm, *atm = new temperature[size_a];

    for (int i = 0; i < size_a; ++i) {
      tm = findById(aid[i]);
      //set new object with selected values
      atm[i].setId(tm->getId());
      atm[i].setPointId(tm->getPointId());
      atm[i].setType(tm->getType());
      atm[i].setDateTime(tm->getDateTime());
      atm[i].setPrediction(tm->getPrediction());
      atm[i].setValue(tm->getValue());
    }
    
    return atm;
  }

  void temperatureDao::insert(temperature *atm, int size_a)
  {
    cout << "insert vector mode" << endl;
    this->acopy(atm, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      INSERT INTO temperature
      VALUES(:aull_t, :aus_t_1, aus_t_2, :ac20_t, :aus_t_3, :ad_t);
    //EXEC SQL COMMIT WORK RELEASE;

    // for (int i = 0; i < size_a; ++i) {
    //   cout << atm[i].getName() << endl;
    // }
  }

  void temperatureDao::update(temperature *atm, int size_a)
  {
    cout << "update vector mode" << endl;
    this->acopy(atm, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      UPDATE temperature SET
      point_id=:aus_t_1,
      type=:aus_t_2,
      datetime=:ac20_t,
      prediction=:aus_t_3,
      value=:ad_t
      WHERE temperature_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void temperatureDao::remove(temperature *atm, int size_a)
  {
    cout << "delete vector mode" << endl;
    this->acopy(atm, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      DELETE FROM temperature
      WHERE temperature_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }
}
/104            1336499769  1001  1001  100644  2261      `
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
//#include<vector>
#include"../types.h"
#include"rsmc.h"
#include"rsmcDao.h"
#include<sqlca.h>

using namespace nrs;
using namespace std;

EXEC SQL BEGIN DECLARE SECTION;
varchar log_pass[40];
EXEC SQL END DECLARE SECTION;

void pres(rsmc *rs)
{
  printf("*  id    *  nrs::rsmc_name       *  nrs::rsmc_type *\n");
  printf("|  %-5d ", rs->getId());
  printf("|  %-20s |", rs->getName());
  printf("  %-10u     |\n", rs->getType());
  printf("--------------------------------------------------\n");
}

void pres(rsmc *ars, int size_a)
{
  printf("*  id    *  nrs::rsmc_name       *  nrs::rsmc_type *\n");
  for (int i = 0; i < size_a; ++i) {
    printf("|  %-5d ", ars[i].getId());
    printf("|  %-20s |", ars[i].getName());
    printf("  %-10u     |\n", ars[i].getType());
  }
  printf("--------------------------------------------------\n");
}

void init_test_rsmc(rsmc *ars, char *name, ull *indices, int size_a)
{
  for (int i = 0; i < 21; ++i)
    name[i] = '\0';

  for (int i = 1; i < 10; ++i) {
    ars[i].setId(i);
    sprintf(name, "%d", i);
    //cout << name << endl;
    ars[i].setName(name); 
    ars[i].setType(i);
    indices[i-1] = i-1;
  }

  indices[size_a-1] = size_a - 1;
}

void test_rsmc()
{
  rsmc *rs, *ars = new rsmc[10];
  rsmcDao *rsd = new rsmcDao();
  //vector<rsmc> vrs(10);
  char name[20];
  ull *indices = new ull[10];

  rs = new rsmc();
  rs->setId(1);
  rs->setName("tunoshna_station");
  rs->setType(0);
  rsd->insert(rs);
  delete rs;
  pres(rs = rsd->findById(1));
  rs->setType(1);
  rsd->update(rs);
  pres(rs = rsd->findById(1));
  rsd->remove(rs);
  //EXEC SQL COMMIT WORK RELEASE;

  init_test_rsmc(ars, name, indices, 10);
  rsd->insert(ars, 10);
  delete [] ars;
  ars = rsd->findById(indices, 10);
  pres(ars, 10);
  for (int i = 1; i < 10; ++i) { 
    ars[i].setType(i + 10);
  }

  rsd->update(ars, 10);
  delete [] ars;
  ars = rsd->findById(indices, 10);
  pres(ars, 10);
  rsd->remove(ars, 10);
}

int main()
{
  strcpy(log_pass.arr,"system/manager");
  log_pass.len = strlen(log_pass.arr);
  EXEC SQL CONNECT :log_pass;
  printf("connection open\n");
  test_rsmc();
  EXEC SQL COMMIT;
  printf("connection closed\n");
  
  return 0;
}

