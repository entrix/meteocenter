#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<iostream>
//#include<vector>
#include"raw_param.h"
#include"raw_paramDao.h"

namespace nrp {

#include<sqlca.h>
#include"../../main.h"
  
  EXEC SQL BEGIN DECLARE SECTION;
  //for scalar case
  unsigned long long  ull_t;
  unsigned short  us_t_1;
  unsigned short  us_t_2;
  static varchar c20_t_1[20];
  static varchar c20_t_2[20];
  //cycle's increment varialble
  unsigned short loop;
  //for vector case
  unsigned long long  aull_t[100];
  unsigned short  aus_t_1[100];
  unsigned short  aus_t_2[100];
  static varchar ac20_t_1[100][20];
  static varchar ac20_t_2[100][20];
  EXEC SQL END DECLARE SECTION;
  
  using namespace std;

  void rawParamDao::copy(rawParam *rp)
  {
    char *value = rp->getDateTime();
    ull_t = rp->getId();
    us_t_1 = rp->getPointId();
    for (int i = 0; i < 19; ++i)
      c20_t_1.arr[i] = value[i];
    c20_t_1.arr[19] = '\0';
    c20_t_1.len = ustrlen(c20_t_1.arr);
    us_t_2  = rp->getPrediction();
    value = rp->getVorticityAdvection();
    for (int i = 0; i < 19; ++i)
      c20_t_2.arr[i] = value[i];
    c20_t_2.arr[19] = '\0';
    c20_t_2.len = ustrlen(c20_t_2.arr);
  }

  void rawParamDao::acopy(rawParam *arp, int size_a)
  {
    char *value;

    for (int i = 0; i < size_a; ++i) {
      value = arp[i].getDateTime();
      aull_t[i] = arp[i].getId();
      aus_t_1[i] = arp[i].getPointId();
      for (int j = 0; j < 19; ++j)
	ac20_t_1[i].arr[j] = value[j];
      ac20_t_1[i].arr[19] = '\0';
      ac20_t_1[i].len = ustrlen(ac20_t_1[i].arr);
      aus_t_2[i] = arp[i].getPrediction();
      value = arp[i].getVorticityAdvection();
      for (int j = 0; j < 19; ++j)
	ac20_t_2[i].arr[j] = value[j];
      ac20_t_2[i].arr[19] = '\0';
      ac20_t_2[i].len = ustrlen(ac20_t_2[i].arr);
    }
  }
 
  rawParam *rawParamDao::findById(const ull id)
  {    
    //set id for sql select query
    ull_t = id;
    
    //sql query with oracle pro*C/C++ 
    EXEC SQL SELECT      
      point_id,
      datetime,
      prediction,
      vorticity_advection
      INTO :us_t_1, :c20_t_1, :us_t_2, :c20_t_2 
      FROM raw_param
      WHERE raw_param_id = :ull_t;

    //copy values to local variables
    cId = ull_t;
    cPointId = us_t_1;
    for (int i = 0; i < 19; ++i)
      cDateTime[i] = c20_t_1.arr[i];
    cDateTime[19] = '\0';
    cPrediction = us_t_2;
    for (int i = 0; i < 19; ++i)
      cVorticityAdvection[i] = c20_t_2.arr[i];
    cVorticityAdvection[19] = '\0';

    //set new object with selected values
    rawParam *rp = new rawParam();
    rp->setId(cId);
    rp->setPointId(cPointId);
    rp->setDateTime(cDateTime);
    rp->setPrediction(cPrediction);
    rp->setVorticityAdvection(cVorticityAdvection);

    //printf("result - id = %llu name = %s type = %u\n", rp->getId(), rp->getName(), rp->getType());
    return rp;
  }

  void rawParamDao::insert(rawParam *rp)
  {
    cout << "insert scalar mode"  << endl;
    this->copy(rp);
    EXEC SQL INSERT INTO raw_param 
      VALUES(:ull_t, :us_t_1, :c20_t_1, :us_t_2, c20_t_2);
    //EXEC SQL COMMIT;
  }

  void rawParamDao::update(rawParam *rp)
  {
    cout << "update scalar mode" << endl;
    this->copy(rp);
    EXEC SQL UPDATE raw_param SET
      point_id=:us_t_1,
      datetime=:c20_t_1,
      prediction=:us_t_2,
      vorticity_advection=:c20_t_2
      WHERE raw_param_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void rawParamDao::remove(rawParam *rp)
  {
    cout << "delete scalar mode" << endl;
    this->copy(rp);
    EXEC SQL DELETE FROM raw_param WHERE raw_param_id=:ull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  rawParam *rawParamDao::findById(ull *aid, int size_a)
  {
    // //set id values for sql select queries
    // for (int i = 0; i < size_a; ++i)
    //   aull_t[i] = aid[i];
    
    // //sql query with oracle pro*C/C++ 
    // SELECT rawParam_type, rawParam_name INTO :aus_t, :ac20_t FROM rawParam WHERE rawParam_id = :aull_t;

    rawParam *rp, *arp = new rawParam[size_a];

    for (int i = 0; i < size_a; ++i) {
      rp = findById(aid[i]);
      //set new object with selected values
      arp[i].setId(rp->getId());
      arp[i].setPointId(rp->getPointId());
      arp[i].setDateTime(rp->getDateTime());
      arp[i].setPrediction(rp->getPrediction());
      arp[i].setVorticityAdvection(rp->getVorticityAdvection());
    }
    
    return arp;
  }

  void rawParamDao::insert(rawParam *arp, int size_a)
  {
    cout << "insert vector mode" << endl;
    this->acopy(arp, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      INSERT INTO raw_param
      VALUES(:aull_t, :aus_t_1, :ac20_t_1, :aus_t_2, ac20_t_2);
    //EXEC SQL COMMIT WORK RELEASE;

    // for (int i = 0; i < size_a; ++i) {
    //   cout << arp[i].getName() << endl;
    // }
  }

  void rawParamDao::update(rawParam *arp, int size_a)
  {
    cout << "update vector mode" << endl;
    this->acopy(arp, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      UPDATE rawParam SET
      point_id=:aus_t_1,
      datetime=:ac20_t_1,
      prediction=:aus_t_2,
      vorticity_advection=:ac20_t_2
      WHERE raw_param_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }

  void rawParamDao::remove(rawParam *arp, int size_a)
  {
    cout << "delete vector mode" << endl;
    this->acopy(arp, size_a);
    loop = size_a;
    EXEC SQL FOR :loop
      DELETE FROM raw_param
      WHERE raw_param_id=:aull_t;
    //EXEC SQL COMMIT WORK RELEASE;
  }
}
