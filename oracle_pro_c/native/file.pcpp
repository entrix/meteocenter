#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdbool.h>
#include<stdlib.h>
#include"main.h"
#include"types.h"
#include"dao/humidity/humidity.h"
#include"dao/humidity/humidityDao.h"
#include"dao/precipitation/precipitation.h"
#include"dao/precipitation/precipitationDao.h"
#include"dao/pressure/pressure.h"
#include"dao/pressure/pressureDao.h"
#include"dao/raw_param/raw_param.h"
#include"dao/raw_param/raw_paramDao.h"
#include"dao/rsmc/rsmc.h"
#include"dao/rsmc/rsmcDao.h"
#include"dao/station_delegation/station_delegation.h"
#include"dao/station_delegation/station_delegationDao.h"
#include"dao/station_point/station_point.h"
#include"dao/station_point/station_pointDao.h"
#include"dao/temperature/temperature.h"
#include"dao/temperature/temperatureDao.h"
#include"dao/tropopause/tropopause.h"
#include"dao/tropopause/tropopauseDao.h"
#include"dao/wind/wind.h"
#include"dao/wind/windDao.h"
#include<sqlca.h>

using namespace nhm;
using namespace npc;
using namespace npr;
using namespace nrp;
using namespace nrs;
using namespace nsd;
using namespace nsp;
using namespace ntm;
using namespace ntp;
using namespace nwd;

using namespace std;

EXEC SQL BEGIN DECLARE SECTION;
static varchar log_pass[40];
EXEC SQL END DECLARE SECTION;
/*
void pres(rsmc *rs)
{
  printf("*  id    *  nrs::rsmc_name       *  nrs::rsmc_type *\n");
  printf("|  %-5d ", rs->getId());
  printf("|  %-20s |", rs->getName());
  printf("  %-10u     |\n", rs->getType());
  printf("--------------------------------------------------\n");
}

void pres(rsmc *ars, int size_a)
{
  printf("*  id    *  nrs::rsmc_name       *  nrs::rsmc_type *\n");
  for (int i = 0; i < size_a; ++i) {
    printf("|  %-5d ", ars[i].getId());
    printf("|  %-20s |", ars[i].getName());
    printf("  %-10u     |\n", ars[i].getType());
  }
  printf("--------------------------------------------------\n");
}

void init_test_rsmc(rsmc *ars, char *name, ull *indices, int size_a)
{
  for (int i = 0; i < 21; ++i)
    name[i] = '\0';

  for (int i = 1; i < 10; ++i) {
    ars[i].setId(i);
    sprintf(name, "%d", i);
    //cout << name << endl;
    ars[i].setName(name); 
    ars[i].setType(i);
    indices[i-1] = i-1;
  }

  indices[size_a-1] = size_a - 1;
}

void test_rsmc()
{
  rsmc *rs, *ars = new rsmc[10];
  rsmcDao *rsd = new rsmcDao();
  //vector<rsmc> vrs(10);
  char name[20];
  ull *indices = new ull[10];
  windDao *wnd = new windDao();
  wind *w = wnd->findById(0);
  
  printf(">>>> wind force = %f\n", w->getForce());
  rs = new rsmc();
  rs->setId(1);
  rs->setName("tunoshna_station");
  rs->setType(0);
  rsd->insert(rs);
  delete rs;
  pres(rs = rsd->findById(1), 1);
  rs->setType(1);
  rsd->update(rs);
  pres(rs = rsd->findById(1), 1);
  rsd->remove(rs);
  //EXEC SQL COMMIT WORK RELEASE;

  init_test_rsmc(ars, name, indices, 10);
  rsd->insert(ars, 10);
  delete [] ars;
  ars = rsd->findById(indices, 10);
  pres(ars, 10);
  for (int i = 1; i < 10; ++i) { 
    ars[i].setType(i + 10);
  }

  rsd->update(ars, 10);
  delete [] ars;
  ars = rsd->findById(indices, 10);
  pres(ars, 10);
  rsd->remove(ars, 10);
}

//
int main()
  {
    const char *ln = "system/manager";
    for (int i = 0; ln[i] != '\0'; ++i)
      log_pass.arr[i] = ln[i];
    log_pass.len = ustrlen(log_pass.arr);
    EXEC SQL CONNECT :log_pass;
    printf("connection open\n");
    test_rsmc();
    EXEC SQL COMMIT;
    printf("connection closed\n");
  
    return 0;
  }
*/  

namespace spc {

  int open()
  {
    const char *ln = "system/manager";
    for (int i = 0; ln[i] != '\0'; ++i)
      log_pass.arr[i] = ln[i];
    log_pass.len = ustrlen(log_pass.arr);
    EXEC SQL CONNECT :log_pass;
    printf("connection open\n");

    return 0;
  }

  int close()
  {
    EXEC SQL COMMIT;
    printf("connection closed\n");
    
    return 0;
  }
}

// int main()
//   {
//     // const char *ln = "system/manager";
//     // for (int i = 0; ln[i] != '\0'; ++i)
//     //   log_pass.arr[i] = ln[i];
//     // log_pass.len = ustrlen(log_pass.arr);
//     // EXEC SQL CONNECT :log_pass;
//     // printf("connection open\n");
//     // test_rsmc();
//     // EXEC SQL COMMIT;
//     // printf("connection closed\n");
  
//     return 0;
//   }
